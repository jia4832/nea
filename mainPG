import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from datetime import datetime, timedelta, date
from datetime import datetime
import calendar

class mainPG:
    def __init__(self, root):
        self.root = root
        self.root.title("Main Page")
        self.root.geometry("1500x800")
        self.root.config(bg="light steel blue")

        # Create a menu bar
        menubar = tk.Menu(root)

        # adds a singular menu item
        menubar.add_command(label="Timetable", command=self.showTT)

        # adds a menu item with drop down menu items
        assignments_menu = tk.Menu(menubar, tearoff=0)
        assignments_menu.add_command(label="Upcoming", command=self.asd)
        assignments_menu.add_command(label="Overdue", command=self.asd)
        assignments_menu.add_command(label="Completed", command=self.asd)
        menubar.add_cascade(label="Assignments", menu=assignments_menu) 

        tutors_menu = tk.Menu(menubar, tearoff=0)
        tutors_menu.add_command(label="Find Tutors", command=self.asd)
        tutors_menu.add_command(label="My Tutors", command=self.asd)
        menubar.add_cascade(label="Tutors", menu=tutors_menu)

        settings_menu = tk.Menu(menubar, tearoff=0)
        settings_menu.add_command(label="Profile", command=self.asd)
        settings_menu.add_command(label="Exit", command=root.destroy)
        menubar.add_cascade(label="Settings", menu=settings_menu)

        root.config(menu=menubar)

    def asd(self):
        messagebox.showinfo("asd", "Incomplete")

    def showTT(self):
        timetable(self.root)


class timetable(mainPG):
    def __init__(self, root):
        super().__init__(root)

        self.root.title("Timetable")
        self.root.geometry("1500x800")

        self.current_date = datetime.now().date()
        
        for i in range(10):
            root.columnconfigure(i, weight=1, minsize=20)
            root.rowconfigure(i, weight=1, minsize=20)
        
        # Create the timetable grid within the main grid
        for i in range(2, 9):
            for j in range(1, 8):
                root.columnconfigure(j, weight=1, minsize=200)
                root.rowconfigure(i, weight=1, minsize=100)
                empty_label = self.create_default_label(root)
                empty_label.grid(row=i, column=j, sticky="nesw")

        MandY_label = self.create_default_label(root, text=self.current_date.strftime("%B %Y"), font=("Arial", 20), fg="white", bg="steel blue")
        MandY_label.grid(row=0, column=3, columnspan=3, sticky="nesw")

        # Days of the week labels
        days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        for i, day in enumerate(days, start=2):
            label = self.create_default_label(root, text=day, font=("Arial", 20), fg="white", bg="steel blue")
            label.grid(row=i, column=1, sticky="new")

        self.HighLightCurrentDay()

    def create_default_label(self, parent, **kwargs):
        default_style = {
            "font": ("Arial", 15),
            "borderwidth": 1,
            "relief": "solid",
            **kwargs}
        return tk.Label(parent, **default_style)
    
    def HighLightCurrentDay(self):
        now = datetime.now()
        day_of_week = now.weekday()
        DOWinTT = day_of_week + 1 
        today = date.today().day
        labelTDY = self.create_default_label(root, text=str(today), font=("Arial", 42), relief="solid")
        labelTDY.grid(row=DOWinTT, column=1, sticky="esw")
        for i in range(2,8):
            current_label = self.create_default_label(root, text="",fg="white", bg="steel blue")
            current_label.grid(row=DOWinTT, column=i, sticky="nesw")

if __name__ == "__main__":
    root = tk.Tk()
    mainPG(root)
    root.mainloop()


